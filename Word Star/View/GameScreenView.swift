//
//  GameScreenView.swift
//  Word Star
//
//  Created by –ï–≤–≥–µ–Ω–∏–π –ó–æ—Ç—á–∏–∫ on 28.05.2025.
//
import SwiftUI

struct GameScreenView: View {
    let forceNewGame: Bool // üëà –¥–æ–±–∞–≤–∏–ª–∏ —Ñ–ª–∞–≥
    // üéÆ ViewModel —Ç–µ–ø–µ—Ä—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è —Å —Ñ–ª–∞–≥–æ–º `forceNewGame`
    @StateObject private var viewModel: GameViewModel
    
    @State private var showWordList = false     // üìú –û–≤–µ—Ä–ª–µ–π —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–ª–æ–≤
    
    // üß† –ù–æ–≤—ã–π init —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–º, –≥—Ä—É–∑–∏–º –ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
    init(forceNewGame: Bool) {
        _viewModel = StateObject(wrappedValue: {
            let logic = GameLogic()
            let dictionary = DictionaryManager.shared
            let generator = LetterSetGenerator(dictionary: dictionary)
            let vm = GameViewModel(dictionaryManager: dictionary, generator: generator, gameLogic: logic)
            
            if !forceNewGame, let saved = GameProgressManager.shared.loadProgress() {
                print("üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–∫—É")
                logic.loadState(letters: saved.letters, foundWords: Set(saved.foundWords))
                vm.loadState(letters: saved.letters, foundWords: Set(saved.foundWords))
                vm.score = saved.score
                vm.level = saved.level
                vm.updateWords()
            } else {
                print("üÜï –ù–æ–≤–∞—è –∏–≥—Ä–∞")
                vm.startNewGame()
                GameProgressManager.shared.clearProgress()
            }

            return vm
        }())
        
        self.forceNewGame = forceNewGame
    }


    var body: some View {
        ZStack {
            // üåÑ –§–æ–Ω
            BackgroundManager()
                .ignoresSafeArea()

            // üéâ –ü–æ–±–µ–¥–Ω—ã–π –∞–ª–µ—Ä—Ç
            if viewModel.showWinDialog {
                VStack {
                    Text("üéâ –ü–æ–±–µ–¥–∞!")
                        .font(.title)
                        .padding()
                    Text("–í—ã –Ω–∞—à–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –Ω–∞ —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ!")
                    Button("–û–ö") {
                        viewModel.showWinDialog = false
                    }
                    .padding(.top)
                }
                .frame(maxWidth: 300)
                .padding()
                .background(Color.white.opacity(0.9))
                .cornerRadius(12)
                .shadow(radius: 10)
            }

            // ‚úÖ‚ùå –°–∏–º–≤–æ–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if let symbol = viewModel.lastResultSymbol {
                VStack {
                    Spacer().frame(height: 150)
                    Text(symbol)
                        .font(.system(size: 48))
                        .foregroundColor(symbol == "‚úÖ" ? .green : .red)
                    Spacer()
                }
            }

            VStack {
                // üîù –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å
                HStack {
                    // üìú –ö–Ω–æ–ø–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤
                    Button(action: {
                        showWordList.toggle()
                    }) {
                        Text("üìú")
                            .padding()
                            .background(Color.white.opacity(0.4))
                            .clipShape(Circle())
                    }

                    Spacer()

                    VStack(spacing: 6) {
                        Text("–ù–∞–π–¥–µ–Ω–æ: \(viewModel.getFoundWordCount()) –∏–∑ \(viewModel.getTotalValidWordCount())")
                            .padding(6)
                            .background(Color.white.opacity(0.4))
                            .foregroundColor(.black)
                            .clipShape(Capsule())
                        Text("–û—á–∫–∏: \(viewModel.score)")
                            .padding(6)
                            .background(Color.white.opacity(0.4))
                            .foregroundColor(.black)
                            .clipShape(Capsule())
                    }

                    Spacer()

                    // üîÑ –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                    Button(action: {
                        viewModel.resetGame()
                        BackgroundManagerController.shared.reload()
                    }) {
                        Text("üîÑ")
                            .padding()
                            .background(Color.white.opacity(0.4))
                            .clipShape(Circle())
                    }
                }
                .padding(.horizontal)

                Spacer()

                // ‚≠ê –ò–≥—Ä–æ–≤–∞—è –∑–≤–µ–∑–¥–∞
                GameBoardView(viewModel: viewModel)
                    .padding(.bottom, 12)
            }

            // üìú –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –ø–æ–≤–µ—Ä—Ö
            if showWordList {
                WordListOverlay(viewModel: viewModel) {
                    showWordList = false
                }
            }
        }
    }
}
