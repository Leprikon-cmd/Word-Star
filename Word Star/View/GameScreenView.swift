//
//  GameScreenView.swift
//  Word Star
//
//  Created by –ï–≤–≥–µ–Ω–∏–π –ó–æ—Ç—á–∏–∫ on 28.05.2025.
//
import SwiftUI

// üì∫ –ì–ª–∞–≤–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π —ç–∫—Ä–∞–Ω
struct GameScreenView: View {
    let forceNewGame: Bool                             // üß® –§–ª–∞–≥ ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
    @StateObject private var viewModel: GameViewModel  // üéÆ ViewModel –∏–≥—Ä—ã
    @State private var showWordList = false            // üìú –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤

    // üß† –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å –ª–æ–≥–∏–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–ª–∏ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
    init(forceNewGame: Bool) {
        _viewModel = StateObject(wrappedValue: {
            let dict = DictionaryManager.shared
            let generator = LetterSetGenerator(dictionary: dict)

            if forceNewGame || GameProgressManager.shared.loadProgress() == nil {
                print("üÜï –ù–æ–≤–∞—è –∏–≥—Ä–∞")
                let logic = GameLogic()
                let vm = GameViewModel(dictionaryManager: dict, generator: generator, gameLogic: logic)
                vm.startNewGame()
                GameProgressManager.shared.clearProgress()
                return vm
            } else {
                print("üì¶ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–∫–∏")
                let (logic, vm) = GameProgressManager.shared.restoreGame(dictionary: dict, generator: generator)!
                return vm
            }
        }())

        self.forceNewGame = forceNewGame
    }

    var body: some View {
        ZStack {
            // üåÑ –§–æ–Ω
            BackgroundManager()
                .ignoresSafeArea()

            // üéâ –ü–æ–±–µ–¥–∞
            if viewModel.showWinDialog {
                VStack {
                    Text("üéâ –ü–æ–±–µ–¥–∞!")
                        .font(.title)
                        .padding()
                    Text("–í—ã –Ω–∞—à–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –Ω–∞ —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ!")
                    Button("–û–ö") {
                        viewModel.showWinDialog = false
                    }
                    .padding(.top)
                }
                .frame(maxWidth: 300)
                .padding()
                .background(Color.white.opacity(0.9))
                .cornerRadius(12)
                .shadow(radius: 10)
            }

            // ‚úÖ‚ùå –°–∏–º–≤–æ–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if let symbol = viewModel.lastResultSymbol {
                VStack {
                    Spacer().frame(height: 150)
                    Text(symbol)
                        .font(.system(size: 48))
                        .foregroundColor(symbol == "‚úÖ" ? .green : .red)
                    Spacer()
                }
            }

            VStack {
                // üîù –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å
                HStack {
                    // üìú –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤
                    Button(action: { showWordList.toggle() }) {
                        Text("üìú")
                            .padding()
                            .background(Color.white.opacity(0.4))
                            .clipShape(Circle())
                    }

                    Spacer()

                    VStack(spacing: 6) {
                        Text("–ù–∞–π–¥–µ–Ω–æ: \(viewModel.getFoundWordCount()) –∏–∑ \(viewModel.getTotalValidWordCount())")
                            .padding(6)
                            .background(Color.white.opacity(0.4))
                            .foregroundColor(.black)
                            .clipShape(Capsule())

                        Text("–û—á–∫–∏: \(viewModel.score)")
                            .padding(6)
                            .background(Color.white.opacity(0.4))
                            .foregroundColor(.black)
                            .clipShape(Capsule())
                    }

                    Spacer()

                    // üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫
                    Button(action: {
                        viewModel.resetGame()
                        BackgroundManagerController.shared.reload()
                    }) {
                        Text("üîÑ")
                            .padding()
                            .background(Color.white.opacity(0.4))
                            .clipShape(Circle())
                    }
                }
                .padding(.horizontal)

                Spacer()

                // ‚≠ê –ó–≤–µ–∑–¥–∞
                GameBoardView(viewModel: viewModel)
                    .padding(.bottom, 12)
            }

            // üìú –û–≤–µ—Ä–ª–µ–π —Å–æ —Å–ª–æ–≤–∞–º–∏
            if showWordList {
                WordListOverlay(viewModel: viewModel) {
                    showWordList = false
                }
            }
        }
    }
}
