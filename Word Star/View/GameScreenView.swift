//
//  GameScreenView.swift
//  Word Star
//
//  Created by –ï–≤–≥–µ–Ω–∏–π –ó–æ—Ç—á–∏–∫ on 28.05.2025.
//
import SwiftUI

// üì∫ –ì–ª–∞–≤–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π —ç–∫—Ä–∞–Ω
struct GameScreenView: View {
    let forceNewGame: Bool                             // üß® –§–ª–∞–≥ ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
    @StateObject private var viewModel: GameViewModel  // üéÆ ViewModel –∏–≥—Ä—ã
    @State private var showWordList = false            // üìú –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤

    // üß† –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å –ª–æ–≥–∏–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–ª–∏ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
    init(forceNewGame: Bool) {
        _viewModel = StateObject(wrappedValue: {
            let dict = DictionaryManager.shared
            let generator = LetterSetGenerator(dictionary: dict)

            if forceNewGame || GameProgressManager.shared.loadProgress() == nil {
                print("üÜï –ù–æ–≤–∞—è –∏–≥—Ä–∞")
                let logic = GameLogic()
                let vm = GameViewModel(dictionaryManager: dict, generator: generator, gameLogic: logic)
                vm.startNewGame()
                GameProgressManager.shared.clearProgress()
                return vm
            } else {
                print("üì¶ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–∫–∏")
                let (logic, vm) = GameProgressManager.shared.restoreGame(dictionary: dict, generator: generator)!
                return vm
            }
        }())

        self.forceNewGame = forceNewGame
    }

    var body: some View {
        ZStack {
            // üåÑ –§–æ–Ω
            BackgroundManager()
                .ignoresSafeArea()

            // ‚úÖ‚ùå –°–∏–º–≤–æ–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if let symbol = viewModel.lastResultSymbol {
                VStack {
                    Spacer().frame(height: 150)
                    Text(symbol)
                        .font(.system(size: 48))
                        .foregroundColor(symbol == "‚úÖ" ? .green : .red)
                    Spacer()
                }
            }

            VStack {
                // üîù –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å
                HStack {
                    // üìú –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤
                    Button(action: { showWordList.toggle() }) {
                        Text("üìú")
                            .padding()
                            .background(Color.white.opacity(0.4))
                            .clipShape(Circle())
                    }

                    Spacer()

                    VStack(spacing: 6) {
                        Text("–ù–∞–π–¥–µ–Ω–æ: \(viewModel.getFoundWordCount()) –∏–∑ \(viewModel.getTotalValidWordCount())")
                            .padding(6)
                            .background(Color.white.opacity(0.4))
                            .foregroundColor(.black)
                            .clipShape(Capsule())

                        Text("–û—á–∫–∏: \(viewModel.score)")
                            .padding(6)
                            .background(Color.white.opacity(0.4))
                            .foregroundColor(.black)
                            .clipShape(Capsule())
                    }

                    Spacer()

                    // üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫
                    Button(action: {
                        viewModel.resetGame()
                        BackgroundManagerController.shared.reload()
                    }) {
                        Text("üîÑ")
                            .padding()
                            .background(Color.white.opacity(0.4))
                            .clipShape(Circle())
                    }
                }
                .padding(.horizontal)
                
                if viewModel.postWinMode != .normal && !viewModel.isSurrendered {
                    Button("üòµ –°–¥–∞—é—Å—å") {
                        viewModel.isSurrendered = true
                    }
                    .padding()
                    .background(Color.gray.opacity(0.8))
                    .foregroundColor(.white)
                    .cornerRadius(10)
                }
                
                if viewModel.isSurrendered {
                    Text("–í—ã —Å–¥–∞–ª–∏—Å—å. –í—Å–µ —Å–ª–æ–≤–∞ —Ä–∞—Å–∫—Ä—ã—Ç—ã.")
                        .font(.headline)
                        .padding(8)
                        .background(Color.yellow.opacity(0.9))
                        .cornerRadius(10)
                }

                Spacer()

                // ‚≠ê –ó–≤–µ–∑–¥–∞
                GameBoardView(viewModel: viewModel)
                    .padding(.bottom, 12)
            }

            // üìú –û–≤–µ—Ä–ª–µ–π —Å–æ —Å–ª–æ–≤–∞–º–∏
            if showWordList {
                WordListOverlay(viewModel: viewModel) {
                    showWordList = false
                }
            }
            // üéâ –ü–æ–±–µ–¥–∞
            if viewModel.showWinDialog {
                VStack {
                    Text("üéâ –ü–æ–±–µ–¥–∞!")
                        .font(.title)
                        .padding()
                    Text("–í—ã –ø—Ä–æ—à–ª–∏ —É—Ä–æ–≤–µ–Ω—å!")
                    Button("–û–ö") {
                        viewModel.showWinDialog = false
                        viewModel.isLevelPassed = true // üëà –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚Äî –≤–∫–ª—é—á–∞–µ–º –º–µ–Ω—é —Ä–µ–∂–∏–º–æ–≤
                    }
                    .padding(.top)
                }
                .frame(maxWidth: 300)
                .padding()
                .background(Color.white.opacity(0.9))
                .cornerRadius(12)
                .shadow(radius: 10)
            }
            
            // üéØ –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
            if viewModel.isLevelPassed && !viewModel.showWinDialog {
                VStack(spacing: 16) {
                    Text("üåü –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–π–¥–µ–Ω!")
                        .font(.title)
                        .padding(.bottom)

                    Text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:")
                        .font(.headline)

                    Button("üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å (–±–µ–∑ —à—Ç—Ä–∞—Ñ–æ–≤)") {
                        viewModel.postWinMode = .explorer
                        viewModel.isLevelPassed = false
                    }
                    .padding()
                    .frame(maxWidth: 260)
                    .background(Color.blue.opacity(0.8))
                    .foregroundColor(.white)
                    .cornerRadius(12)

                    Button("üéØ –í—ã–∑–æ–≤ (—Å –±–æ–Ω—É—Å–∞–º–∏)") {
                        viewModel.postWinMode = .challenge
                        viewModel.isLevelPassed = false
                    }
                    .padding()
                    .frame(maxWidth: 260)
                    .background(Color.orange.opacity(0.8))
                    .foregroundColor(.white)
                    .cornerRadius(12)

                    Button("üÜï –ù–æ–≤–∞—è –∏–≥—Ä–∞") {
                        viewModel.startNewGame()
                        BackgroundManagerController.shared.reload()
                        viewModel.isLevelPassed = false // üëà —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
                    }
                    .padding()
                    .frame(maxWidth: 260)
                    .background(Color.red.opacity(0.8))
                    .foregroundColor(.white)
                    .cornerRadius(12)
                }
                .frame(maxWidth: .infinity)
                .padding()
                .background(Color.white.opacity(0.95))
                .cornerRadius(16)
                .shadow(radius: 10)
                .padding(.horizontal)
            }
        }
    }
}
