//
//  StatsView.swift
//  Word Star
//
//  Created by ChatGPT & –ï–≤–≥–µ–Ω–∏–π –ó–æ—Ç—á–∏–∫ on 28.05.2025.
//

import SwiftUI

struct StatsView: View {
    @EnvironmentObject var stats: StatsManager
    @Environment(\.dismiss) var dismiss
    @EnvironmentObject var fontManager: FontManager
    
    @State private var showFoundWords = false
    
    var goToScreen: ((Screen) -> Void)?
    var body: some View {
        ZStack {
            BackgroundManager()
                .ignoresSafeArea()

            ScrollView {
                VStack(alignment: .leading, spacing: 20) {
                    Text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                        .textStyle(size: 18)
                        .bold()
                        .padding(.top)

                    totalWordsStats
                    Divider()
                    levelStats
                }
                .padding()
            }
        }
    }

    private var totalWordsStats: some View {
        VStack(alignment: .leading, spacing: 8) {
            Text("üß† –£–≥–∞–¥–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞")
                .textStyle(size: 18)
                .bold()

            if stats.foundWords.isEmpty {
                Text("‚Äî –ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ —É–≥–∞–¥–∞–Ω–æ")
                    .textStyle(size: 18)
            } else {
                Text("‚Ä¢ –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤: \(stats.foundWords.count)")
                    .textStyle(size: 18)
                let totalAttempts = stats.foundWords.values.reduce(0, +)
                Text("‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ (–≤–∫–ª—é—á–∞—è –ø–æ–≤—Ç–æ—Ä—ã): \(totalAttempts)")
                    .textStyle(size: 18)
            }
        }
        .padding()
        .background(
            Image("parchment")
                .resizable()
                .scaledToFill()
        )
        .clipShape(RoundedRectangle(cornerRadius: 16))
        .onTapGesture {
            if !stats.foundWords.isEmpty {
                showFoundWords = true
            }
        }
        .sheet(isPresented: $showFoundWords) {
            FoundWordsView()
                .environmentObject(stats)
        }
    }

    private var levelStats: some View {
        VStack(alignment: .leading, spacing: 8) {
            Text("üéÆ –ò–≥—Ä—ã –ø–æ —É—Ä–æ–≤–Ω—è–º")
                .textStyle(size: 18)
                .bold()
            
            if stats.gameStats.isEmpty {
                Text("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∏–≥—Ä.")
                    .textStyle(size: 18)
            } else {
                ForEach(stats.gameStats.keys.sorted(), id: \.self) { level in
                    VStack(alignment: .leading) {
                        Text("üìà –£—Ä–æ–≤–µ–Ω—å \(level)")
                            .textStyle(size: 18)
                        
                        let modes = stats.gameStats[level]!
                        ForEach(PostWinMode.allCases, id: \.self) { mode in
                            if let data = modes[mode] {
                                Text("  ‚Ä¢ \(mode.label): —Å—ã–≥—Ä–∞–Ω–æ \(data.total), –ø–æ–±–µ–¥ \(data.wins)")
                                    .textStyle(size: 18)
                            }
                        }
                    }
                }
            }
        }
        .padding()
        .background(
            Image("parchment")
                .resizable()
                .scaledToFill()
        )
        .clipShape(RoundedRectangle(cornerRadius: 16))
    }
}

// üîÑ –†–∞—Å—à–∏—Ä—è–µ–º enum, —á—Ç–æ–±—ã –æ–Ω —Å—Ç–∞–ª –∏ CaseIterable, –∏ —É–¥–æ–±–Ω—ã–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
extension PostWinMode {
    var label: String {
        switch self {
        case .normal: return "–û–±—ã—á–Ω—ã–π"
        case .explorer: return "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å"
        case .challenge: return "–í—ã–∑–æ–≤"
        }
    }
}
