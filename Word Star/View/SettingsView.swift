//
//  SettingsView.swift
//  Word Star
//
//  Created by –ï–≤–≥–µ–Ω–∏–π –ó–æ—Ç—á–∏–∫ on 28.05.2025.
//

import SwiftUI

struct SettingsView: View {
    @Environment(\.dismiss) var dismiss
    @EnvironmentObject var fontManager: FontManager
    @EnvironmentObject var settings: SettingsManager

    @State private var showResetAlert = false

    var body: some View {
        ZStack {
            BackgroundManager()
                .ignoresSafeArea()

            ScrollView {
                VStack(spacing: 24) {
                    header
                    fontSelector
                    backgroundSelector
                    gameModeToggle
                    soundToggle
                    dictionarySelector
                    resetButton
                }
                .padding(.horizontal)
                .padding(.bottom, 32)
            }
        }
        .alert(isPresented: $showResetAlert) {
            Alert(
                title: Text("–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?"),
                message: Text("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å."),
                primaryButton: .destructive(Text("–°–±—Ä–æ—Å–∏—Ç—å")) {
                    settings.resetAll()
                },
                secondaryButton: .cancel()
            )
        }
    }

    private var header: some View {
        Text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
            .textStyle(size: 18)
            .font(.largeTitle)
            .padding(.top)
    }

    private var fontSelector: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("üñãÔ∏è –®—Ä–∏—Ñ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
                .textStyle(size: 18)

            Picker("–í—ã–±–µ—Ä–∏ —à—Ä–∏—Ñ—Ç", selection: $fontManager.selectedFontName) {
                ForEach(fontManager.availableFonts, id: \.self) { font in
                    Text(font)
                        .textStyle(size: 18)
                        .tag(font)
                }
            }
            .pickerStyle(MenuPickerStyle()) // üëà –í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é
            .padding()
            .frame(maxWidth: .infinity)
            .background(Color.white.opacity(0.5))
            .cornerRadius(8)
        }
    }

    private var backgroundSelector: some View {
        VStack(alignment: .leading, spacing: 8) {
            Text("üåÖ‚Äî –¢—É—Ç –±—É–¥–µ—Ç –≤—ã–±–æ—Ä —Ñ–æ–Ω–∞ ‚Äî")
                .textStyle(size: 18)
                .padding()
                .frame(maxWidth: .infinity)
                .background(Color.white.opacity(0.5))
                .cornerRadius(8)
        }
    }

    private var gameModeToggle: some View {
        Toggle("üéÆ –ò–≥—Ä–æ–≤–æ–π —Ä–µ–∂–∏–º (–∂–∏–∑–Ω–∏, –≤—ã–∑–æ–≤—ã)", isOn: $settings.isGameModeEnabled)
            .textStyle(size: 18)
            .padding()
            .background(Color.white.opacity(0.5))
            .cornerRadius(8)
    }

    private var soundToggle: some View {
        Toggle("üîà –ó–≤—É–∫", isOn: $settings.isSoundEnabled)
            .textStyle(size: 18)
            .padding()
            .background(Color.white.opacity(0.5))
            .cornerRadius(8)
    }

    private var dictionarySelector: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("üìö –°–ª–æ–≤–∞—Ä–∏ –ø–æ –∞–≤—Ç–æ—Ä–∞–º")
                .textStyle(size: 18)

            ForEach(["–°. –ò. –û–∂–µ–≥–æ–≤", "–ê. –ü. –ï–≤–≥–µ–Ω—å–µ–≤–∞", "–í. –ò. –î–∞–ª—å", "–Ω–µ—Ç"], id: \.self) { author in
                Toggle(authorLabel(author), isOn: Binding(
                    get: { settings.enabledAuthors.contains(author) },
                    set: { isOn in
                        if isOn {
                            settings.enabledAuthors.insert(author)
                        } else {
                            settings.enabledAuthors.remove(author)
                        }
                    }
                ))
                .textStyle(size: 18)
                .padding(.horizontal)
                .padding(.vertical, 4)
                .background(Color.white.opacity(0.4))
                .cornerRadius(8)
            }
        }
        .padding()
        .background(Color.white.opacity(0.5))
        .cornerRadius(8)
    }
    
    private func authorLabel(_ author: String) -> String {
        switch author {
        case "–Ω–µ—Ç":
            return "üåê GitHub-—Å–ª–æ–≤–∞—Ä—å –±–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π"
        default:
            return author
        }
    }

    private var resetButton: some View {
        Button(action: {
            showResetAlert = true
        }) {
            Text("üß® –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                .foregroundColor(.red)
                .padding()
                .frame(maxWidth: .infinity)
                .background(Color.white.opacity(0.5))
                .cornerRadius(8)
        }
    }
}
