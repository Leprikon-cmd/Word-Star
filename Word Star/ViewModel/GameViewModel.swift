//
//  GameViewModel.swift
//  Word Star
//
//  Created by –ï–≤–≥–µ–Ω–∏–π –ó–æ—Ç—á–∏–∫ on 28.05.2025.
//
import Foundation
import SwiftUI

// üéØ –†–µ–∂–∏–º –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
enum PostWinMode {
    case normal        // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
    case explorer      // –†–µ–∂–∏–º –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ —à—Ç—Ä–∞—Ñ–æ–≤)
    case challenge     // –í—ã–∑–æ–≤ (—Å –±–æ–Ω—É—Å–∞–º–∏)
}

// üéÆ ViewModel ‚Äî —Å–≤—è–∑—ã–≤–∞–µ—Ç UI –∏ –∏–≥—Ä–æ–≤—É—é –ª–æ–≥–∏–∫—É
class GameViewModel: ObservableObject {

    // üì¶ Published-—Å–≤–æ–π—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–µ–¥—è—Ç –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
    @Published var letters: [Character] = []          // —Ç–µ–∫—É—â–∏–π –Ω–∞–±–æ—Ä –±—É–∫–≤
    @Published var level: Int = 1                     // —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    @Published var selectedLetters: [Character] = []  // üî§ –°–ª–æ–≤–æ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    @Published var result: String = ""                // ‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    @Published var validWords: [String] = []          // üìã –í—Å–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞
    @Published var foundWords: [String] = []          // üß† –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–º —Å–ª–æ–≤–∞
    @Published var score: Int = 0                     // üßÆ –û—á–∫–∏
    @Published var showWinDialog: Bool = false        // üèÜ –ü–æ–±–µ–¥–∞
    @Published var lastResultSymbol: String? = nil    // ‚úÖ –∏–ª–∏ ‚ùå –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞
    @Published var showOverlay: Bool = false          // üî≤ –¥–ª—è –±—É–¥—É—â–∏—Ö –æ–≤–µ—Ä–ª–µ–µ–≤
    @Published var isLevelPassed: Bool = false        // ‚úÖ –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–π–¥–µ–Ω –ø–æ —É–ø—Ä–æ—â—ë–Ω–Ω–æ–π –ª–æ–≥–∏–∫–µ
    @Published var postWinMode: PostWinMode = .normal // üîÅ –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º
    @Published var isSurrendered: Bool = false        // ‚öë –ò–≥—Ä–æ–∫ —Å–¥–∞–ª—Å—è

    private var lastAddedChar: Character? = nil      // üîê –Ω–∞ –±—É–¥—É—â–µ–µ ‚Äî –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–∞ –±—É–∫–≤—ã

    // üìö –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    private let dictionaryManager: DictionaryManager
    private let letterSetGenerator: LetterSetGenerator
    private let progressManager = GameProgressManager.shared

    let gameLogic: GameLogic

    // ‚öôÔ∏è –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É
    init(dictionaryManager: DictionaryManager, generator: LetterSetGenerator, gameLogic: GameLogic, forceNewGame: Bool = false) {
        self.dictionaryManager = dictionaryManager
        self.letterSetGenerator = generator
        self.gameLogic = gameLogic

        if forceNewGame {
            print("üßº –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤–∞—è –∏–≥—Ä–∞")
            startNewGame()
        } else if let saved = progressManager.loadProgress() {
            print("üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é –∏–≥—Ä—É")

            // üéÆ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å—ë
            self.letters = saved.letters
            self.validWords = saved.validWords
            self.foundWords = saved.foundWords
            self.score = saved.score
            self.level = saved.level

            gameLogic.loadState(
                letters: saved.letters,
                validWords: saved.validWords,
                foundWords: Set(saved.foundWords)
            )

            updateWords()
        } else {
            print("üÜï –ü—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ—Ç ‚Äî —Å—Ç–∞—Ä—Ç –Ω–æ–≤–æ–π –∏–≥—Ä—ã")
            startNewGame()
        }
    }

    // üîÅ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
    func startNewGame() {
        gameLogic.generateNewLevel(from: letterSetGenerator)
        letters = gameLogic.getLetters()
        validWords = gameLogic.getValidWords().sorted(by: { $0.count == $1.count ? $0 < $1 : $0.count > $1.count })
        foundWords = []
        score = 0
        level = 1
        result = ""
        showWinDialog = false
        isSurrendered = false // üîÅ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ "–°–¥–∞–ª—Å—è"
        postWinMode = .normal // üßπ –°–±—Ä–æ—Å —Ä–µ–∂–∏–º–∞ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
    }

    // üß† –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ GameProgressManager.restoreGame)
    func loadState(letters: [Character], validWords: [String], foundWords: Set<String>) {
        self.letters = letters
        self.validWords = validWords
        self.foundWords = Array(foundWords)
    }

    // üîÅ –°–±—Ä–æ—Å (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ ¬´üîÑ¬ª)
    func resetGame() {
        print("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É")

        // üßπ –ß–∏—Å—Ç–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        progressManager.clearProgress()

        // üÜï –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
        startNewGame()
    }

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
    func validateWord() {
        let word = selectedLetters.map { String($0) }.joined()
        tryAddWord(word)
        clearSelection()
    }
    
    // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è (–≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ)
    private func checkLevelCompletion() {
        // ‚ö†Ô∏è –¢–æ–ª—å–∫–æ –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ ‚Äî –∏–Ω–∞—á–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        guard postWinMode == .normal else { return }

        let foundSet = Set(foundWords)

        let has5LetterWord = foundSet.contains(where: { $0.count == 5 })
        let has4LetterWord = foundSet.contains(where: { $0.count == 4 })
        let atLeast3Others = foundSet.filter { $0.count != 4 && $0.count != 5 }.count >= 3

        if has5LetterWord && has4LetterWord && atLeast3Others {
            isLevelPassed = true
            showWinDialog = true
            print("üéâ –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–π–¥–µ–Ω –ø–æ —É–ø—Ä–æ—â—ë–Ω–Ω–æ–π –ª–æ–≥–∏–∫–µ!")
        }
    }

    // ‚ûï –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ
    func tryAddWord(_ word: String) {
        if gameLogic.isValidWord(word), !foundWords.contains(word) {
            foundWords.append(word)

            // üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∂–∏–º–∞ "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å"
            if postWinMode == .explorer {
                result = "‚ÑπÔ∏è \(word) (–±–µ–∑ –æ—á–∫–æ–≤)"
                lastResultSymbol = "‚úÖ"
            } else {
                // üéØ –°—Ç–∞–Ω–¥–∞—Ä—Ç –∏–ª–∏ –≤—ã–∑–æ–≤ ‚Äî –Ω–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏
                addScore(for: word.count)
                result = "‚úÖ \(word)"
                lastResultSymbol = "‚úÖ"
            }

            // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            progressManager.saveProgress(
                letters: letters,
                foundWords: foundWords,
                validWords: validWords,
                score: score,
                level: level
            )

            // üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
            checkLevelCompletion()

            // üèÜ –ü–æ–ª–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
            if foundWords.count == gameLogic.getValidWords().count {
                if postWinMode == .challenge {
                    let bonus = foundWords.count * 5
                    score += bonus
                    result += " üéÅ +\(bonus) –±–æ–Ω—É—Å–Ω—ã—Ö –æ—á–∫–æ–≤!"
                }

                if postWinMode != .explorer {
                    showWinDialog = true
                }
            }

        } else {
            // ‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–ª–æ–≤–æ
            result = "‚ùå"
            lastResultSymbol = "‚ùå"
        }

        // ‚è≥ –ß–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥—ã —É–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        DispatchQueue.main.asyncAfter(deadline: .now() + 1.5) {
            self.lastResultSymbol = nil
        }
    }

    // üìä –ü–æ–¥—Å—á—ë—Ç –æ—á–∫–æ–≤
    private func addScore(for length: Int) {
        let base: Int
        switch length {
        case 2...3: base = 5
        case 4: base = 10
        case 5: base = 20
        case 6: base = 30
        default: base = 40 + (length - 6) * 10
        }
        score += base
    }

    // üîÅ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤ –≤ —Å–ø–∏—Å–∫–µ
    func updateWords() {
        validWords = gameLogic.getValidWords().sorted { $0.count > $1.count }
    }

    // ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±—É–∫–≤—ã
    func addLetter(_ letter: Character) {
        selectedLetters.append(letter)
    }

    // üßπ –û—á–∏—Å—Ç–∫–∞ –≤–≤–æ–¥–∞
    func clearSelection() {
        selectedLetters.removeAll()
        result = ""
        lastAddedChar = nil
    }

    // ‚ÑπÔ∏è –ö–æ–ª-–≤–æ —É–≥–∞–¥–∞–Ω–Ω—ã—Ö
    func getFoundWordCount() -> Int {
        return foundWords.count
    }

    // ‚ÑπÔ∏è –û–±—â–µ–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö
    func getTotalValidWordCount() -> Int {
        return gameLogic.getValidWords().count
    }

    // üß± –°–ª–æ–≤–æ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    func getWord() -> String {
        return selectedLetters.map { String($0) }.joined()
    }
}
