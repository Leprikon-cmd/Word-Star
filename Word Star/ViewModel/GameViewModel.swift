//
//  GameViewModel.swift
//  Word Star
//
//  Created by –ï–≤–≥–µ–Ω–∏–π –ó–æ—Ç—á–∏–∫ on 28.05.2025.
//
import Foundation
import SwiftUI

// üéÆ –û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∏–≥—Ä—ã
final class GameViewModel: ObservableObject {

    // üé® –¢–µ–∫—É—â–∏–π —Ñ–æ–Ω
    @Published var backgroundImage: String = "Background1.jpg"
    
    // —Ç–µ–∫—É—â–∏–π –Ω–∞–±–æ—Ä –±—É–∫–≤
    @Published var letters: [Character] = []

    // üî§ –¢–µ–∫—É—â–∏–π –≤–≤–æ–¥ (–ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ)
    @Published var selectedLetters: [Character] = []

    // ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å—Ç—Ä–æ–∫–∞)
    @Published var result: String = ""

    // üìã –í—Å–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è
    @Published var validWords: [String] = []

    // üß† –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–º —Å–ª–æ–≤–∞
    @Published var foundWords: [String] = []

    // üßÆ –¢–µ–∫—É—â–∏–π —Å—á—ë—Ç
    @Published var score: Int = 0

    // üèÜ –§–ª–∞–≥ –ø–æ–±–µ–¥—ã
    @Published var showWinDialog: Bool = false

    // ‚úÖ‚ùå –°–∏–º–≤–æ–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–≥–∞–ª–∫–∞/–∫—Ä–µ—Å—Ç–∏–∫)
    @Published var lastResultSymbol: String? = nil

    // üî≤ –û–≤–µ—Ä–ª–µ–π ‚Äî –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    @Published var showOverlay: Bool = false

    // üîê –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ç–∞–ø–∞ –ø–æ —Ç–æ–π –∂–µ –±—É–∫–≤–µ –ø–æ–¥—Ä—è–¥ (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
    private var lastAddedChar: Character? = nil

    // üì¶ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏ —Å–ª–æ–≤–∞—Ä—å (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏)
    private let dictionaryManager: DictionaryManager
    private let letterSetGenerator: LetterSetGenerator
    let gameLogic: GameLogic

    init(dictionaryManager: DictionaryManager, generator: LetterSetGenerator, gameLogic: GameLogic) {
        self.dictionaryManager = dictionaryManager
        self.letterSetGenerator = generator
        self.gameLogic = gameLogic

        startNewGame() // üöÄ –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤—ã–∑–æ–≤, –∏ –≤—Å—ë –∫—Ä–∞—Å–∏–≤–æ
    }
    
    func startNewGame() {
        gameLogic.generateNewLevel(from: letterSetGenerator)     // üéÆ –°–Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∏–º —É—Ä–æ–≤–µ–Ω—å
        letters = gameLogic.getLetters()                          // ‚úçÔ∏è –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—É–∫–≤—ã –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
        validWords = gameLogic.getValidWords().sorted(by: {      // üìú –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ª–æ–≤–∞
            $0.count == $1.count ? $0 < $1 : $0.count > $1.count
        })
        foundWords = []
        score = 0
        result = ""
        pickNewBackground()
        showWinDialog = false
    }

    // üé® –°–ª—É—á–∞–π–Ω—ã–π —Ñ–æ–Ω
    func pickNewBackground() {
        let index = Int.random(in: 1...62)
        backgroundImage = "Background\(index)"
    }

    // üîÅ –°–±—Ä–æ—Å —É—Ä–æ–≤–Ω—è
    func resetGame() {
        foundWords.removeAll()
        score = 0
        result = ""
        selectedLetters.removeAll()
        gameLogic.generateNewLevel(from: letterSetGenerator)
        letters = gameLogic.getLetters() // ‚úÖ –æ–±–Ω–æ–≤–∏–º published-—Å–≤–æ–π—Å—Ç–≤–æ
        updateWords()
        pickNewBackground()
    }

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
    func validateWord() {
        let word = selectedLetters.map { String($0) }.joined()
        tryAddWord(word)
        clearSelection()
    }

    // ‚ûï –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ
    func tryAddWord(_ word: String) {
        if gameLogic.isValidWord(word), !foundWords.contains(word) {
            foundWords.append(word)
            addScore(for: word.count)
            result = "‚úÖ \(word)"
            lastResultSymbol = "‚úÖ"

            if foundWords.count == gameLogic.getValidWords().count {
                showWinDialog = true
                let bonus = foundWords.count * 5
                score += bonus
                result += " üéÅ +\(bonus) –±–æ–Ω—É—Å–Ω—ã—Ö –æ—á–∫–æ–≤!"
            }

        } else {
            result = "‚ùå"
            lastResultSymbol = "‚ùå"
        }

        // ‚è≥ –ß–µ—Ä–µ–∑ 1.5 —Å–µ–∫ —É–±—Ä–∞—Ç—å —Å–∏–º–≤–æ–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        DispatchQueue.main.asyncAfter(deadline: .now() + 1.5) {
            self.lastResultSymbol = nil
        }
    }

    // üìä –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤
    private func addScore(for length: Int) {
        let base: Int
        switch length {
        case 2...3: base = 5
        case 4: base = 10
        case 5: base = 20
        case 6: base = 30
        default: base = 40 + (length - 6) * 10
        }
        score += base
    }

    // üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–ª–æ–≤
    func updateWords() {
        validWords = gameLogic.getValidWords().sorted { $0.count > $1.count }
    }

    // ‚ûï –î–æ–±–∞–≤–∏—Ç—å –±—É–∫–≤—É
    func addLetter(_ letter: Character) {
        selectedLetters.append(letter)
    }

    // üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤–≤–æ–¥
    func clearSelection() {
        selectedLetters.removeAll()
        result = ""
        lastAddedChar = nil
    }

    // ‚ÑπÔ∏è –ö–æ–ª-–≤–æ —É–≥–∞–¥–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤
    func getFoundWordCount() -> Int {
        return foundWords.count
    }

    // ‚ÑπÔ∏è –û–±—â–µ–µ –∫–æ–ª-–≤–æ —Å–ª–æ–≤
    func getTotalValidWordCount() -> Int {
        return gameLogic.getValidWords().count
    }

    // üî§ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ–º–æ–µ —Å–ª–æ–≤–æ
    func getWord() -> String {
        return selectedLetters.map { String($0) }.joined()
    }
}
