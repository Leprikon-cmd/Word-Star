//
//  GameProgressManager.swift
//  Word Star
//
//  Created by ChatGPT on 27.05.2025
//

import Foundation

/// üì¶ –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–≥—Ä—ã.
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç UserDefaults ‚Äî –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ.
/// –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ Singleton ‚Äî –µ–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –¥–æ—Å—Ç—É–ø–∞.
class GameProgressManager: ObservableObject {
    
    // üîí –û–±—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä
    static let shared = GameProgressManager()

    // üóùÔ∏è –ö–ª—é—á–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    private let lettersKey = "progress_letters"
    private let validWordsKey = "progress_validWords"
    private let foundWordsKey = "progress_foundWords"
    private let scoreKey = "progress_score"
    private let levelKey = "progress_level"

    // ‚ùå –ó–∞–ø—Ä–µ—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∏–∑–≤–Ω–µ
    private init() {}

    // MARK: - üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

    /// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã: –±—É–∫–≤—ã, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞, –≤–∞–ª–∏–¥–Ω—ã–µ —Å–ª–æ–≤–∞, –æ—á–∫–∏ –∏ —É—Ä–æ–≤–µ–Ω—å
    func saveProgress(letters: [Character], foundWords: [String], validWords: [String], score: Int, level: Int) {
        // UserDefaults –Ω–µ —É–º–µ–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å [Character], –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ [String]
        let letterStrings = letters.map { String($0) }

        UserDefaults.standard.set(letterStrings, forKey: lettersKey)
        UserDefaults.standard.set(validWords, forKey: validWordsKey)
        UserDefaults.standard.set(foundWords, forKey: foundWordsKey)
        UserDefaults.standard.set(score, forKey: scoreKey)
        UserDefaults.standard.set(level, forKey: levelKey)

        print("‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: –±—É–∫–≤ \(letters.count), –Ω–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤ \(foundWords.count), –æ—á–∫–∏ \(score), —É—Ä–æ–≤–µ–Ω—å \(level)")
    }

    // MARK: - üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

    /// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º nil
    func loadProgress() -> (letters: [Character], foundWords: [String], validWords: [String], score: Int, level: Int)? {
        // ‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
        guard let letterStrings = UserDefaults.standard.stringArray(forKey: lettersKey),
              let foundWords = UserDefaults.standard.stringArray(forKey: foundWordsKey),
              let validWords = UserDefaults.standard.stringArray(forKey: validWordsKey) else {
            print("‚ö†Ô∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
            return nil
        }

        // üî§ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º [String] –≤ [Character]
        let letters = letterStrings.compactMap { $0.first }

        let score = UserDefaults.standard.integer(forKey: scoreKey)
        let level = UserDefaults.standard.integer(forKey: levelKey)

        print("üì¶ –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∂–µ–Ω: –±—É–∫–≤ \(letters.count), –Ω–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤ \(foundWords.count), –æ—á–∫–∏ \(score), —É—Ä–æ–≤–µ–Ω—å \(level)")

        return (letters, foundWords, validWords, score, level)
    }

    // MARK: - üßº –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

    /// –£–¥–∞–ª—è–µ–º –≤—Å—ë —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    func clearProgress() {
        UserDefaults.standard.removeObject(forKey: lettersKey)
        UserDefaults.standard.removeObject(forKey: foundWordsKey)
        UserDefaults.standard.removeObject(forKey: validWordsKey)
        UserDefaults.standard.removeObject(forKey: scoreKey)
        UserDefaults.standard.removeObject(forKey: levelKey)

        print("üóëÔ∏è –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω")
    }

    // MARK: - üß† –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –∏ ViewModel –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

    /// –ü–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç GameLogic –∏ GameViewModel –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    func restoreGame(dictionary: DictionaryManager, generator: LetterSetGenerator) -> (GameLogic, GameViewModel)? {
        guard let saved = loadProgress() else {
            return nil
        }

        // ‚öôÔ∏è –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä–æ–≤—É—é –ª–æ–≥–∏–∫—É
        let logic = GameLogic()
        logic.loadState(
            letters: saved.letters,
            validWords: saved.validWords,
            foundWords: Set(saved.foundWords)
        )

        // üß† –°–æ–∑–¥–∞—ë–º ViewModel –∏ –ø–æ–¥–≥—Ä—É–∂–∞–µ–º —Ç—É–¥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å
        let viewModel = GameViewModel(
            dictionaryManager: dictionary,
            generator: generator,
            gameLogic: logic,
            forceNewGame: false
        )
        viewModel.loadState(
            letters: saved.letters,
            validWords: saved.validWords,
            foundWords: Set(saved.foundWords)
        )
        viewModel.score = saved.score
        viewModel.level = saved.level
        viewModel.updateWords()

        return (logic, viewModel)
    }
}
