//
//  DictionaryManager.swift
//  Word Star
//
//  Created by –ï–≤–≥–µ–Ω–∏–π –ó–æ—Ç—á–∏–∫ on 28.05.2025.
//

import Foundation

// üìò –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
struct DictionaryItem: Codable {
    let word: String
    let definition: String
    let author: String
}

// üìò –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–ª–æ–≤–∞—Ä—è ‚Äî Singleton + ObservableObject
class DictionaryManager: ObservableObject {
    static let shared = DictionaryManager() // üîÇ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø
    
    private init() {
        loadWords()
    }
    
    // üî§ –í—Å–µ —Å–ª–æ–≤–∞ ‚Äî –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
    private var allWords: Set<String> = []
    
    // üß† –ü–æ–ª–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å: —Å–ª–æ–≤–æ ‚Üí DictionaryItem (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ + –∞–≤—Ç–æ—Ä)
    private var fullDictionary: [String: DictionaryItem] = [:]
    
    // üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ dictionary.json –≤ –±–∞–Ω–¥–ª–µ
    func loadWords() {
        guard let url = Bundle.main.url(forResource: "dictionary", withExtension: "json") else {
            print("‚ùå –§–∞–π–ª —Å–ª–æ–≤–∞—Ä—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        }

        do {
            let data = try Data(contentsOf: url)
            let decoder = JSONDecoder()
            let items = try decoder.decode([DictionaryItem].self, from: data)

            let enabledAuthors = SettingsManager.shared.enabledAuthors

            fullDictionary.removeAll()
            allWords.removeAll()

            var withoutDefinition = 0

            for item in items {
                let word = item.word.lowercased()
                let trimmedDefinition = item.definition.trimmingCharacters(in: .whitespacesAndNewlines)

                let itemAuthors = item.author
                    .components(separatedBy: ",")
                    .map { $0.trimmingCharacters(in: .whitespaces) }

                let hasMatchingAuthor = itemAuthors.contains(where: { enabledAuthors.contains($0) })

                let isGithubEntry = trimmedDefinition.isEmpty || item.author == "–Ω–µ—Ç"
                let githubAllowed = enabledAuthors.contains("–Ω–µ—Ç")

                // ‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–∏—Ç—Ö–∞–±–æ–≤—Å–∫–∏–µ, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã
                if isGithubEntry && !githubAllowed {
                    continue
                }

                // ‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–æ–≤–∞ –æ—Ç –∞–≤—Ç–æ—Ä–æ–≤, –Ω–µ –≤–∫–ª—é—á—ë–Ω–Ω—ã—Ö –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
                if !hasMatchingAuthor {
                    continue
                }

                if trimmedDefinition.isEmpty {
                    withoutDefinition += 1
                }

                fullDictionary[word] = item
                allWords.insert(word)
            }

            print("üìâ –°–ª–æ–≤ –±–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: \(withoutDefinition)")
            print("‚úÖ –°–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: \(allWords.count)")

        } catch {
            print("üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤–∞—Ä—è: \(error.localizedDescription)")
        }
    }
    
    // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞, —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ (–ø–æ –∞–≤—Ç–æ—Ä—É)
    func isDefinitionVisible(for item: DictionaryItem) -> Bool {
        for author in SettingsManager.shared.enabledAuthors {
            if item.author.contains(author) {
                return true
            }
        }
        return false
    }
    
    // üîç –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞
    func getWords() -> Set<String> {
        return allWords
    }
    
    func getDefinition(for word: String) -> String {
        guard let item = fullDictionary[word.lowercased()] else {
            return "–ù–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"
        }
        
        let enabled = SettingsManager.shared.enabledAuthors
        
        // –µ—Å–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥–ø–∏—Å–∏ –∞–≤—Ç–æ—Ä–æ–≤ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏–º –ø–æ –º–µ—Ç–∞-–∞–≤—Ç–æ—Ä—É
        if !item.definition.contains("\n/") {
            let authors = item.author.components(separatedBy: ",").map { $0.trimmingCharacters(in: .whitespaces) }
            for a in authors {
                if enabled.contains(a) {
                    return "\(item.definition)\n/\(a)/"
                }
            }
            return "–ù–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"
        }
        
        // –∏—â–µ–º –±–ª–æ–∫–∏: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ + –ø–æ–¥–ø–∏—Å—å
        let pattern = #"(?s)(.*?)(?:\n/([^/]+?)/)"#
        var result: [String] = []
        
        let regex = try? NSRegularExpression(pattern: pattern, options: [])
        let matches = regex?.matches(in: item.definition, options: [], range: NSRange(item.definition.startIndex..., in: item.definition)) ?? []
        
        for match in matches {
            if match.numberOfRanges == 3,
               let defRange = Range(match.range(at: 1), in: item.definition),
               let authorRange = Range(match.range(at: 2), in: item.definition) {
                
                let def = item.definition[defRange].trimmingCharacters(in: .whitespacesAndNewlines)
                let author = item.definition[authorRange].trimmingCharacters(in: .whitespacesAndNewlines)
                
                if enabled.contains(author) {
                    result.append("\(def)\n/\(author)/")
                }
            }
        }
        
        return result.isEmpty ? "–ù–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è" : result.joined(separator: "\n\n")
    }
}
