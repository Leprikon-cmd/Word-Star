//
//  LetterSetGenerator.swift
//  Word Star
//
//  Created by –ï–≤–≥–µ–Ω–∏–π –ó–æ—Ç—á–∏–∫ on 28.05.2025.
//
import Foundation

// üß± –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞: –±—É–∫–≤—ã + –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞
struct LetterSet {
    let letters: [Character]    // üü° 5 –±—É–∫–≤, –≤–∫–ª—é—á–∞—è –ø–æ–≤—Ç–æ—Ä—ã
    let words: Set<String>      // ‚úÖ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞
}

// üîÅ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ –±—É–∫–≤: –≤—ã–±–∏—Ä–∞–µ—Ç 5 –±—É–∫–≤ –∏ –∏—â–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–ª–æ–≤–∞
final class LetterSetGenerator {

    private let LETTER_COUNT = 5          // üî¢ —Ä–∞–∑–º–µ—Ä –Ω–∞–±–æ—Ä–∞
    private let MIN_VALID_WORDS = 5       // üìâ –º–∏–Ω–∏–º—É–º —Å–ª–æ–≤ –≤ –Ω–∞–±–æ—Ä–µ

    private let dictionary: DictionaryManager

    init(dictionary: DictionaryManager) {
        self.dictionary = dictionary
    }

    // üéØ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    func generateSet() -> LetterSet? {
        let allWords = dictionary.getWords()

        // 1Ô∏è‚É£ –í—ã–±–∏—Ä–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ ‚Äî —Å–ª–æ–≤–∞ —Ä–æ–≤–Ω–æ –∏–∑ 5 –±—É–∫–≤
        let candidates = allWords.filter { $0.count == LETTER_COUNT }.shuffled()

        for base in candidates {
            let letters = Array(base) // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–≤—Ç–æ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ü, –ê, –ü, –ö, –ê)

            // 2Ô∏è‚É£ –ò—â–µ–º –≤—Å–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∏–∑ —ç—Ç–∏—Ö –±—É–∫–≤
            let matching = allWords.filter { word in
                word.count >= 2 && canBuildWord(word, from: letters)
            }

            // 3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            if matching.count >= MIN_VALID_WORDS {
                return LetterSet(letters: letters, words: Set(matching))
            }
        }

        // ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –Ω–∞–±–æ—Ä
        return nil
    }

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: –º–æ–∂–Ω–æ –ª–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ –∏–∑ –∑–∞–¥–∞–Ω–Ω—ã—Ö –±—É–∫–≤ —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏
    private func canBuildWord(_ word: String, from available: [Character]) -> Bool {
        let unique = Set(available)
        return word.allSatisfy { unique.contains($0) }
    }
}
