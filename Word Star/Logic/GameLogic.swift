//
//  GameLogic.swift
//  Word Star
//
//  Created by –ï–≤–≥–µ–Ω–∏–π –ó–æ—Ç—á–∏–∫ on 28.05.2025.
//
import Foundation

// GameLogic ‚Äî –ª–æ–≥–∏–∫–∞ –∏–≥—Ä—ã (–æ–¥–∏–Ω–æ—á–∫–∞), –∫–∞–∫ –≤ Android-–≤–µ—Ä—Å–∏–∏
final class GameLogic {
    
    private var letters: [Character] = []
    private var foundWords: Set<String> = []
    
    // üî† –¢–µ–∫—É—â–∏–π –Ω–∞–±–æ—Ä –±—É–∫–≤ –¥–ª—è —É—Ä–æ–≤–Ω—è
    private(set) var currentLetters: [Character] = []
    
    func getLetters() -> [Character] {
        return currentLetters
    }
    
    // ‚úÖ –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    private(set) var validWords: Set<String> = []

    // üîÅ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è: –ø–æ–ª—É—á–∞–µ–º –±—É–∫–≤—ã –∏ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞
    func generateNewLevel(from generator: LetterSetGenerator) {
        if let set = generator.generateSet() {
            currentLetters = set.letters
            validWords = set.words
            print("üì• –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –±—É–∫–≤—ã: \(currentLetters)")
            print("‚úÖ –î–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–ª–æ–≤: \(validWords.count)")
        } else {
            currentLetters = ["–ê", "–†", "–°", "–¢", "–£"]  // fallback-–Ω–∞–±–æ—Ä
            validWords = []
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–±–æ—Ä, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∑–∞–ø–∞—Å–Ω–æ–π")
        }
    }

    // üîé –ü—Ä–æ–≤–µ—Ä–∫–∞: –º–æ–∂–Ω–æ –ª–∏ —Å–æ–±—Ä–∞—Ç—å —Ç–∞–∫–æ–µ —Å–ª–æ–≤–æ –∏ –æ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ
    func isValidWord(_ input: String) -> Bool {
        let word = input.lowercased()
        return word.count >= 2 && validWords.contains(word)
    }

    // üß† –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ —Å–æ–±—Ä–∞—Ç—å —Å–ª–æ–≤–æ –∏–∑ –±—É–∫–≤ (—Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏)
    func canBuildWord(_ word: String, from letters: [Character]) -> Bool {
        var available = Dictionary(grouping: letters, by: { $0 }).mapValues { $0.count }

        for char in word {
            let count = available[char] ?? 0
            if count == 0 {
                return false
            }
            available[char] = count - 1
        }

        return true
    }

    // üì§ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞
    func getValidWords() -> [String] {
        return Array(validWords)
    }
    func loadState(letters: [Character], foundWords: Set<String>) {
        self.letters = letters
        self.foundWords = foundWords
    }
}
