//
//  GameLogic.swift
//  Word Star
//
//  Created by –ï–≤–≥–µ–Ω–∏–π –ó–æ—Ç—á–∏–∫ on 28.05.2025.
//

import Foundation

/// üß† GameLogic ‚Äî —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —É—Ä–æ–≤–Ω—è:
/// - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±—É–∫–≤—ã –∏ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞
/// - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
/// - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
final class GameLogic {
    
    // üî† –ë—É–∫–≤—ã —É—Ä–æ–≤–Ω—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è –∏–∑–≤–Ω–µ)
    private(set) var currentLetters: [Character] = []
    
    // ‚úÖ –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞ (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
    private(set) var validWords: Set<String> = []
    
    // MARK: - üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Ä–æ–≤–Ω—è
    
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: –±—É–∫–≤—ã + –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞
    func generateNewLevel(from generator: LetterSetGenerator) {
        if let set = generator.generateSet() {
            currentLetters = set.letters
            validWords = set.words
            print("üì• –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –±—É–∫–≤—ã: \(currentLetters)")
            print("‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤: \(validWords.count)")
        } else {
            // üîÅ –†–µ–∑–µ—Ä–≤–Ω—ã–π –Ω–∞–±–æ—Ä –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
            currentLetters = ["–ê", "–†", "–°", "–¢", "–£"]
            validWords = []
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∑–∞–ø–∞—Å–Ω–æ–π –Ω–∞–±–æ—Ä")
        }
    }
    
    // MARK: - ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–≤–∞
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–æ–≤–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–º
    func isValidWord(_ input: String) -> Bool {
        let word = input.lowercased()
        return word.count >= 2 && validWords.contains(word)
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ —Å–æ–±—Ä–∞—Ç—å —Å–ª–æ–≤–æ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—É–∫–≤
    /// (—É—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä—ã, –µ—Å–ª–∏ –±—É–∫–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑)
    func canBuildWord(_ word: String, from letters: [Character]) -> Bool {
        var available = Dictionary(grouping: letters, by: { $0 }).mapValues { $0.count }
        
        for char in word {
            guard let count = available[char], count > 0 else {
                return false
            }
            available[char]! -= 1
        }
        
        return true
    }
    
    // MARK: - üì§ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±—É–∫–≤—ã —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    func getLetters() -> [Character] {
        return currentLetters
    }
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–ª–æ–≤
    func getValidWords() -> [String] {
        return Array(validWords)
    }
    
    // MARK: - üíæ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    
    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    func loadState(letters: [Character], validWords: [String], foundWords: Set<String>) {
        self.currentLetters = letters
        self.validWords = Set(validWords)
        // ‚ùó foundWords –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –ª–æ–≥–∏–∫–∏ (—Å–º. GameViewModel)
        // –ü–æ—ç—Ç–æ–º—É –º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å, –ª–∏–±–æ –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –±—É–¥—É—â–µ–µ.
    }
    
    // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ø–æ –Ω–æ–≤—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    func isLevelCompleted(foundWords: [String]) -> Bool {
        var usedWords: [String] = []
        var hasFive = false
        var hasFour = false
        var otherCount = 0
        
        for word in foundWords {
            if !hasFive && word.count >= 5 {
                hasFive = true
                usedWords.append(word)
                continue
            }
            
            if !hasFour && word.count >= 4 && !usedWords.contains(word) {
                hasFour = true
                usedWords.append(word)
                continue
            }
            
            if word.count >= 2 && !usedWords.contains(word) {
                otherCount += 1
                usedWords.append(word)
            }
            
            if hasFive && hasFour && otherCount >= 3 {
                return true
            }
        }
        
        return false
    }
}
