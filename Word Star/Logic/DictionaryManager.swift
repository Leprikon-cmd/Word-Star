//
//  DictionaryManager.swift
//  Word Star
//
//  Created by –ï–≤–≥–µ–Ω–∏–π –ó–æ—Ç—á–∏–∫ on 28.05.2025.
//
import Foundation

// üìò –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
struct DictionaryItem: Codable {
    let word: String
    let definition: String
    let author: String
}

// üìö –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–ª–æ–≤–∞—Ä—è
final class DictionaryManager {

    // üî§ –í—Å–µ —Å–ª–æ–≤–∞ ‚Äî –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
    private(set) var allWords: Set<String> = []

    // üß† –ü–æ–ª–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å: —Å–ª–æ–≤–æ ‚Üí DictionaryItem (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ + –∞–≤—Ç–æ—Ä)
    private var fullDictionary: [String: DictionaryItem] = [:]

    // üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ dictionary.json –≤ –±–∞–Ω–¥–ª–µ
    func loadWords() {
        guard let url = Bundle.main.url(forResource: "dictionary", withExtension: "json") else {
            print("‚ùå –§–∞–π–ª —Å–ª–æ–≤–∞—Ä—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        }

        do {
            let data = try Data(contentsOf: url)
            let decoder = JSONDecoder()
            let items = try decoder.decode([DictionaryItem].self, from: data)

            let withoutDefinition = items.filter { $0.definition.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty }.count
            print("üìâ –°–ª–æ–≤ –±–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: \(withoutDefinition)")

            fullDictionary.removeAll()
            allWords.removeAll()

            for item in items {
                let word = item.word.lowercased()
                fullDictionary[word] = item
                allWords.insert(word)
            }

            print("‚úÖ –°–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: \(allWords.count)")

        } catch {
            print("üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤–∞—Ä—è: \(error.localizedDescription)")
        }
    }

    // üîç –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞
    func getWords() -> Set<String> {
        return allWords
    }

    // üìò –ü–æ–ª—É—á–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    func getDefinition(for word: String) -> String {
        return fullDictionary[word.lowercased()]?.definition ?? "–ù–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"
    }

    // ‚úç –ü–æ–ª—É—á–∏—Ç—å –∞–≤—Ç–æ—Ä–∞
    func getAuthor(for word: String) -> String {
        return fullDictionary[word.lowercased()]?.author ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    }
}
